{
  "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressToWhitelist",
          "type": "address"
        }
      ],
      "name": "addUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_mintAmount",
          "type": "uint16"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onlyWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseExtension",
          "type": "string"
        }
      ],
      "name": "setBaseExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCost",
          "type": "uint256"
        }
      ],
      "name": "setCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newmaxMintAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
  "receipt": {
    "to": null,
    "from": "0x0219f301551757D33954c074091718B785f5B87c",
    "contractAddress": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
    "transactionIndex": 0,
    "gasUsed": "11253539",
    "logsBloom": "0x26800080100000000040004400808000000082000010000000800000000000020002001040004200000000000400000000003000060481a0002000160024000004103000000000888080000800000000184300000004001140000000100a000009000000020840000000000100000800200040004000060000000010044000400080020440000800010000000008041218001900000600000000004000000000000401000102000020000182010000000000000802808060002010080401400040101002800000100c000000000000000820200080000008200001084008603aa000400200000000080000100020000008000000008004040108808002880000",
    "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116",
    "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000003"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000005"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000006"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000007"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000008"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000009"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000000a"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000000b"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000000c"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000000d"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000000e"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000000f"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000010"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000011"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000012"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000013"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000014"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000015"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000016"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000017"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000018"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000019"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000001a"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000001b"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000001c"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000001d"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000001e"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000001f"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000020"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000021"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000022"
        ],
        "data": "0x",
        "logIndex": 34,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000023"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000024"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000025"
        ],
        "data": "0x",
        "logIndex": 37,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000026"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000027"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000028"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000029"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000002a"
        ],
        "data": "0x",
        "logIndex": 42,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000002b"
        ],
        "data": "0x",
        "logIndex": 43,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000002c"
        ],
        "data": "0x",
        "logIndex": 44,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000002d"
        ],
        "data": "0x",
        "logIndex": 45,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000002e"
        ],
        "data": "0x",
        "logIndex": 46,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x000000000000000000000000000000000000000000000000000000000000002f"
        ],
        "data": "0x",
        "logIndex": 47,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000030"
        ],
        "data": "0x",
        "logIndex": 48,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000031"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000032"
        ],
        "data": "0x",
        "logIndex": 50,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 12872089,
        "transactionHash": "0x7dc3ecc3738640b0c3e2fd3c2b59cd6fe2a782c2f95de8088dd88526b17354c8",
        "address": "0xcA858bEE25585100A94C9CeA7115A3889547037C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c",
          "0x0000000000000000000000000000000000000000000000000000000000000033"
        ],
        "data": "0x",
        "logIndex": 51,
        "blockHash": "0x6f14fad62603a1b4300706d5f5cedf6125fc92dd4db4da9bb81a2a3acc744116"
      }
    ],
    "blockNumber": 12872089,
    "cumulativeGasUsed": "11253539",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2d263c4de327e3cd247d7419d64ca41f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToWhitelist\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_mintAmount\",\"type\":\"uint16\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newmaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Celostrials.sol\":\"Celostrials\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa2695a4c7b192f34b98a3875dfce54c8c6c4976b898a5598b1ce0355ce2e6c56\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Celostrials.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Celostrials | Aliens are now on Celo\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Celostrials is Ownable, Pausable, ERC721Enumerable {\\n    using Strings for uint256;\\n\\n    string public baseURI;\\n    string public baseExtension = \\\".json\\\";\\n    uint256 public maxSupply = 10000;\\n    uint256 private batchSize = 50;\\n    uint256 private currentBatch = 1;\\n    uint256 public maxMintAmount = 10;\\n    uint256 public cost = 3 ether;\\n    bool public onlyWhitelist = false;\\n    mapping(uint256 => bool) private isMinted;\\n    mapping(address => uint256) whiteList;\\n\\n    modifier isWhitelisted(address _address) {\\n        require(\\n            whiteList[_address] > 0,\\n            \\\"Celostrials: Minting is only open to whitelisted wallets currently\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() ERC721(\\\"Celostrials\\\", \\\"NFET\\\") {\\n        setBaseURI(\\\"https://ipfs.io/ipfs/QmTn1W5CpTdqrkvdSLb7nXGWVYYmoTWMv8N2ripQthXw2v/\\\");\\n        for (uint16 i = 1; i <= 51; i++) {\\n            _safeMint(msg.sender, i);\\n            isMinted[i] = true;\\n        }\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function mint(address _to, uint16 _mintAmount) public payable whenNotPaused {\\n        require(_mintAmount > 0, \\\"Celostrials: mintAmount should be greater than 0\\\");\\n        require(\\n            _mintAmount <= maxMintAmount,\\n            \\\"Celostrials: mintAmount should be less than max mint\\\"\\n        );\\n        uint256 supply = totalSupply();\\n        require(supply + _mintAmount <= maxSupply, \\\"Celostrials: Supply not available\\\");\\n        if (onlyWhitelist) {\\n            require(\\n                _mintAmount <= whiteList[msg.sender],\\n                \\\"Celostrails: Maximum whitelist mint is 4\\\"\\n            );\\n            require(\\n                whiteList[msg.sender] > 0,\\n                \\\"Celostrials: Minting is only open to whitelisted wallets currently\\\"\\n            );\\n            whiteList[msg.sender] -= _mintAmount;\\n        }\\n        if (msg.sender != owner()) {\\n            require(msg.value >= cost * _mintAmount, \\\"Celostrials: Insuffcient Celo\\\");\\n        }\\n        for (uint16 i = 1; i <= _mintAmount; i++) {\\n            mintRandom(_to);\\n        }\\n    }\\n\\n    function mintRandom(address _to) internal {\\n        uint256 supply = totalSupply();\\n        if (supply % batchSize == 0) {\\n            currentBatch++;\\n        }\\n        uint256 index = getRandomInBatch(supply);\\n        bool minted = false;\\n        while (!minted) {\\n            if (!isMinted[index]) {\\n                _safeMint(_to, index);\\n                isMinted[index] = true;\\n                minted = true;\\n            } else {\\n                if (index == batchSize * (currentBatch + 1)) {\\n                    index = (batchSize * currentBatch) + 1;\\n                } else {\\n                    index++;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getRandomInBatch(uint256 supply) internal view returns (uint256) {\\n        uint256 offset = (batchSize * currentBatch);\\n        uint256 randomnumber = uint256(\\n            keccak256(abi.encodePacked(block.timestamp, msg.sender, supply))\\n        ) % (batchSize + 1);\\n        randomnumber = randomnumber + offset;\\n        return randomnumber;\\n    }\\n\\n    function walletOfOwner(address _owner) public view returns (uint256[] memory) {\\n        uint256 ownerTokenCount = balanceOf(_owner);\\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\n        for (uint256 i; i < ownerTokenCount; i++) {\\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokenIds;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"Celostrials: URI query for nonexistent token\\\");\\n        string memory curretBaseURI = _baseURI();\\n        return\\n            bytes(curretBaseURI).length > 0\\n                ? string(abi.encodePacked(curretBaseURI, tokenId.toString(), baseExtension))\\n                : \\\"\\\";\\n    }\\n\\n    function setCost(uint256 _newCost) public onlyOwner {\\n        cost = _newCost;\\n    }\\n\\n    function setMaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {\\n        maxMintAmount = _newmaxMintAmount;\\n    }\\n\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\n        baseURI = _newBaseURI;\\n    }\\n\\n    function setBaseExtension(string memory _newBaseExtension) public onlyOwner {\\n        baseExtension = _newBaseExtension;\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        require(payable(msg.sender).send(address(this).balance), \\\"Transfer Failed\\\");\\n    }\\n\\n    function withdrawERC20(IERC20 token) public onlyOwner {\\n        require(token.transfer(msg.sender, token.balanceOf(address(this))), \\\"Transfer failed\\\");\\n    }\\n\\n    function addUser(address _addressToWhitelist) public onlyOwner {\\n        whiteList[_addressToWhitelist] = 4;\\n    }\\n\\n    function openWhitelist() public onlyOwner {\\n        onlyWhitelist = true;\\n    }\\n\\n    function closeWhitelist() public onlyOwner {\\n        onlyWhitelist = false;\\n    }\\n\\n    function isWhitelist() external view returns (bool) {\\n        return whiteList[msg.sender] > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x3360f6e12076bb6ddcec3a05f7370eba7a982dbba51fb80b427140a7db192c44\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060400160405280600581526020017f2e6a736f6e000000000000000000000000000000000000000000000000000000815250600c90805190602001906200005192919062000dda565b50612710600d556032600e556001600f55600a6010556729a2241af62c00006011556000601260006101000a81548160ff0219169083151502179055503480156200009b57600080fd5b506040518060400160405280600b81526020017f43656c6f73747269616c730000000000000000000000000000000000000000008152506040518060400160405280600481526020017f4e46455400000000000000000000000000000000000000000000000000000000815250620001286200011c6200021760201b60201c565b6200021f60201b60201c565b60008060146101000a81548160ff02191690831515021790555081600190805190602001906200015a92919062000dda565b5080600290805190602001906200017392919062000dda565b505050620001a06040518060800160405280604481526020016200618660449139620002e360201b60201c565b6000600190505b60338161ffff16116200021057620001ca338261ffff166200030f60201b60201c565b6001601360008361ffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080620002079062000ec7565b915050620001a7565b50620014d5565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620002f36200033560201b60201c565b80600b90805190602001906200030b92919062000dda565b5050565b62000331828260405180602001604052806000815250620003c660201b60201c565b5050565b620003456200021760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200036b6200043460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620003c4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003bb9062000f58565b60405180910390fd5b565b620003d883836200045d60201b60201c565b620003ed60008484846200065760201b60201c565b6200042f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004269062000ff0565b60405180910390fd5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620004d0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004c79062001062565b60405180910390fd5b620004e1816200081160201b60201c565b1562000524576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200051b90620010d4565b60405180910390fd5b62000538600083836200087d60201b60201c565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200058a919062001100565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46200065360008383620009c460201b60201c565b5050565b6000620006858473ffffffffffffffffffffffffffffffffffffffff16620009c960201b620019f61760201c565b1562000804578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02620006b76200021760201b60201c565b8786866040518563ffffffff1660e01b8152600401620006db949392919062001257565b602060405180830381600087803b158015620006f657600080fd5b505af19250505080156200072a57506040513d601f19601f820116820180604052508101906200072791906200130d565b60015b620007b3573d80600081146200075d576040519150601f19603f3d011682016040523d82523d6000602084013e62000762565b606091505b50600081511415620007ab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007a29062000ff0565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505062000809565b600190505b949350505050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b62000895838383620009ec60201b62001a191760201c565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620008e257620008dc81620009f160201b60201c565b6200092a565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614620009295762000928838262000a3a60201b60201c565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200097757620009718162000bb760201b60201c565b620009bf565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614620009be57620009bd828262000c9360201b60201c565b5b5b505050565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050565b600980549050600a600083815260200190815260200160002081905550600981908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600162000a548462000d1f60201b620010c41760201c565b62000a6091906200133f565b905060006008600084815260200190815260200160002054905081811462000b46576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816008600083815260200190815260200160002081905550505b6008600084815260200190815260200160002060009055600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160098054905062000bcd91906200133f565b90506000600a600084815260200190815260200160002054905060006009838154811062000c005762000bff6200137a565b5b90600052602060002001549050806009838154811062000c255762000c246200137a565b5b906000526020600020018190555081600a600083815260200190815260200160002081905550600a600085815260200190815260200160002060009055600980548062000c775762000c76620013a9565b5b6001900381819060005260206000200160009055905550505050565b600062000cab8362000d1f60201b620010c41760201c565b905081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806008600084815260200190815260200160002081905550505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000d93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d8a906200144e565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b82805462000de8906200149f565b90600052602060002090601f01602090048101928262000e0c576000855562000e58565b82601f1062000e2757805160ff191683800117855562000e58565b8280016001018555821562000e58579182015b8281111562000e5757825182559160200191906001019062000e3a565b5b50905062000e67919062000e6b565b5090565b5b8082111562000e8657600081600090555060010162000e6c565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061ffff82169050919050565b600062000ed48262000eb9565b915061ffff82141562000eec5762000eeb62000e8a565b5b600182019050919050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000f4060208362000ef7565b915062000f4d8262000f08565b602082019050919050565b6000602082019050818103600083015262000f738162000f31565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600062000fd860328362000ef7565b915062000fe58262000f7a565b604082019050919050565b600060208201905081810360008301526200100b8162000fc9565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006200104a60208362000ef7565b9150620010578262001012565b602082019050919050565b600060208201905081810360008301526200107d816200103b565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000620010bc601c8362000ef7565b9150620010c98262001084565b602082019050919050565b60006020820190508181036000830152620010ef81620010ad565b9050919050565b6000819050919050565b60006200110d82620010f6565b91506200111a83620010f6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562001152576200115162000e8a565b5b828201905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200118a826200115d565b9050919050565b6200119c816200117d565b82525050565b620011ad81620010f6565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620011ef578082015181840152602081019050620011d2565b83811115620011ff576000848401525b50505050565b6000601f19601f8301169050919050565b60006200122382620011b3565b6200122f8185620011be565b935062001241818560208601620011cf565b6200124c8162001205565b840191505092915050565b60006080820190506200126e600083018762001191565b6200127d602083018662001191565b6200128c6040830185620011a2565b8181036060830152620012a0818462001216565b905095945050505050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b620012e781620012b0565b8114620012f357600080fd5b50565b6000815190506200130781620012dc565b92915050565b600060208284031215620013265762001325620012ab565b5b60006200133684828501620012f6565b91505092915050565b60006200134c82620010f6565b91506200135983620010f6565b9250828210156200136f576200136e62000e8a565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006200143660298362000ef7565b91506200144382620013d8565b604082019050919050565b60006020820190508181036000830152620014698162001427565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620014b857607f821691505b60208210811415620014cf57620014ce62001470565b5b50919050565b614ca180620014e56000396000f3fe60806040526004361061023b5760003560e01c8063586b9a7c1161012e578063a88e0996116100ab578063d5abeb011161006f578063d5abeb011461080b578063da3ef23f14610836578063e985e9c51461085f578063f2fde38b1461089c578063f4f3b200146108c55761023b565b8063a88e099614610733578063ad0be4bd1461075e578063b88d4fde1461077a578063c6682862146107a3578063c87b56dd146107ce5761023b565b8063715018a6116100f2578063715018a6146106865780638456cb591461069d5780638da5cb5b146106b457806395d89b41146106df578063a22cb4651461070a5761023b565b8063586b9a7c1461059f5780635c975abb146105b65780636352211e146105e15780636c0360eb1461061e57806370a08231146106495761023b565b80632f745c59116101bc57806342842e0e1161018057806342842e0e146104aa578063438b6300146104d357806344a0d68a146105105780634f6ccce71461053957806355f804b3146105765761023b565b80632f745c59146103f85780633ccfd60b146104355780633f4ba83a1461043f5780634146ed0a14610456578063421b2d8b146104815761023b565b8063095ea7b311610203578063095ea7b31461032557806313faede61461034e57806318160ddd14610379578063239c70ae146103a457806323b872dd146103cf5761023b565b806301ffc9a71461024057806306fdde031461027d578063081812fc146102a8578063083bbe7f146102e5578063088a4ed0146102fc575b600080fd5b34801561024c57600080fd5b50610267600480360381019061026291906130d9565b6108ee565b6040516102749190613121565b60405180910390f35b34801561028957600080fd5b50610292610968565b60405161029f91906131d5565b60405180910390f35b3480156102b457600080fd5b506102cf60048036038101906102ca919061322d565b6109fa565b6040516102dc919061329b565b60405180910390f35b3480156102f157600080fd5b506102fa610a40565b005b34801561030857600080fd5b50610323600480360381019061031e919061322d565b610a65565b005b34801561033157600080fd5b5061034c600480360381019061034791906132e2565b610a77565b005b34801561035a57600080fd5b50610363610b8f565b6040516103709190613331565b60405180910390f35b34801561038557600080fd5b5061038e610b95565b60405161039b9190613331565b60405180910390f35b3480156103b057600080fd5b506103b9610ba2565b6040516103c69190613331565b60405180910390f35b3480156103db57600080fd5b506103f660048036038101906103f1919061334c565b610ba8565b005b34801561040457600080fd5b5061041f600480360381019061041a91906132e2565b610c08565b60405161042c9190613331565b60405180910390f35b61043d610cad565b005b34801561044b57600080fd5b50610454610d2b565b005b34801561046257600080fd5b5061046b610d3d565b6040516104789190613121565b60405180910390f35b34801561048d57600080fd5b506104a860048036038101906104a3919061339f565b610d86565b005b3480156104b657600080fd5b506104d160048036038101906104cc919061334c565b610dd6565b005b3480156104df57600080fd5b506104fa60048036038101906104f5919061339f565b610df6565b604051610507919061348a565b60405180910390f35b34801561051c57600080fd5b506105376004803603810190610532919061322d565b610ea4565b005b34801561054557600080fd5b50610560600480360381019061055b919061322d565b610eb6565b60405161056d9190613331565b60405180910390f35b34801561058257600080fd5b5061059d600480360381019061059891906135e1565b610f27565b005b3480156105ab57600080fd5b506105b4610f49565b005b3480156105c257600080fd5b506105cb610f6e565b6040516105d89190613121565b60405180910390f35b3480156105ed57600080fd5b506106086004803603810190610603919061322d565b610f84565b604051610615919061329b565b60405180910390f35b34801561062a57600080fd5b50610633611036565b60405161064091906131d5565b60405180910390f35b34801561065557600080fd5b50610670600480360381019061066b919061339f565b6110c4565b60405161067d9190613331565b60405180910390f35b34801561069257600080fd5b5061069b61117c565b005b3480156106a957600080fd5b506106b2611190565b005b3480156106c057600080fd5b506106c96111a2565b6040516106d6919061329b565b60405180910390f35b3480156106eb57600080fd5b506106f46111cb565b60405161070191906131d5565b60405180910390f35b34801561071657600080fd5b50610731600480360381019061072c9190613656565b61125d565b005b34801561073f57600080fd5b50610748611273565b6040516107559190613121565b60405180910390f35b610778600480360381019061077391906136d0565b611286565b005b34801561078657600080fd5b506107a1600480360381019061079c91906137b1565b6115bd565b005b3480156107af57600080fd5b506107b861161f565b6040516107c591906131d5565b60405180910390f35b3480156107da57600080fd5b506107f560048036038101906107f0919061322d565b6116ad565b60405161080291906131d5565b60405180910390f35b34801561081757600080fd5b50610820611757565b60405161082d9190613331565b60405180910390f35b34801561084257600080fd5b5061085d600480360381019061085891906135e1565b61175d565b005b34801561086b57600080fd5b5061088660048036038101906108819190613834565b61177f565b6040516108939190613121565b60405180910390f35b3480156108a857600080fd5b506108c360048036038101906108be919061339f565b611813565b005b3480156108d157600080fd5b506108ec60048036038101906108e791906138b2565b611897565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610961575061096082611a1e565b5b9050919050565b6060600180546109779061390e565b80601f01602080910402602001604051908101604052809291908181526020018280546109a39061390e565b80156109f05780601f106109c5576101008083540402835291602001916109f0565b820191906000526020600020905b8154815290600101906020018083116109d357829003601f168201915b5050505050905090565b6000610a0582611b00565b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610a48611b4b565b6001601260006101000a81548160ff021916908315150217905550565b610a6d611b4b565b8060108190555050565b6000610a8282610f84565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea906139b2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b12611bc9565b73ffffffffffffffffffffffffffffffffffffffff161480610b415750610b4081610b3b611bc9565b61177f565b5b610b80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7790613a44565b60405180910390fd5b610b8a8383611bd1565b505050565b60115481565b6000600980549050905090565b60105481565b610bb9610bb3611bc9565b82611c8a565b610bf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bef90613ad6565b60405180910390fd5b610c03838383611d1f565b505050565b6000610c13836110c4565b8210610c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4b90613b68565b60405180910390fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610cb5611b4b565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050610d29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2090613bd4565b60405180910390fd5b565b610d33611b4b565b610d3b611f86565b565b600080601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411905090565b610d8e611b4b565b6004601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b610df1838383604051806020016040528060008152506115bd565b505050565b60606000610e03836110c4565b905060008167ffffffffffffffff811115610e2157610e206134b6565b5b604051908082528060200260200182016040528015610e4f5781602001602082028036833780820191505090505b50905060005b82811015610e9957610e678582610c08565b828281518110610e7a57610e79613bf4565b5b6020026020010181815250508080610e9190613c52565b915050610e55565b508092505050919050565b610eac611b4b565b8060118190555050565b6000610ec0610b95565b8210610f01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef890613d0d565b60405180910390fd5b60098281548110610f1557610f14613bf4565b5b90600052602060002001549050919050565b610f2f611b4b565b80600b9080519060200190610f45929190612fca565b5050565b610f51611b4b565b6000601260006101000a81548160ff021916908315150217905550565b60008060149054906101000a900460ff16905090565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561102d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102490613d79565b60405180910390fd5b80915050919050565b600b80546110439061390e565b80601f016020809104026020016040519081016040528092919081815260200182805461106f9061390e565b80156110bc5780601f10611091576101008083540402835291602001916110bc565b820191906000526020600020905b81548152906001019060200180831161109f57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112c90613e0b565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611184611b4b565b61118e6000611fe8565b565b611198611b4b565b6111a06120ac565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600280546111da9061390e565b80601f01602080910402602001604051908101604052809291908181526020018280546112069061390e565b80156112535780601f1061122857610100808354040283529160200191611253565b820191906000526020600020905b81548152906001019060200180831161123657829003601f168201915b5050505050905090565b61126f611268611bc9565b838361210f565b5050565b601260009054906101000a900460ff1681565b61128e61227c565b60008161ffff16116112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc90613e9d565b60405180910390fd5b6010548161ffff16111561131e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131590613f2f565b60405180910390fd5b6000611328610b95565b9050600d548261ffff168261133d9190613f4f565b111561137e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137590614017565b60405180910390fd5b601260009054906101000a900460ff16156114f657601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261ffff161115611419576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611410906140a9565b60405180910390fd5b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161149b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149290614161565b60405180910390fd5b8161ffff16601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114ee9190614181565b925050819055505b6114fe6111a2565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611585578161ffff1660115461154291906141b5565b341015611584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157b9061425b565b60405180910390fd5b5b6000600190505b8261ffff168161ffff16116115b7576115a4846122c6565b80806115af9061427b565b91505061158c565b50505050565b6115ce6115c8611bc9565b83611c8a565b61160d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160490613ad6565b60405180910390fd5b611619848484846123db565b50505050565b600c805461162c9061390e565b80601f01602080910402602001604051908101604052809291908181526020018280546116589061390e565b80156116a55780601f1061167a576101008083540402835291602001916116a5565b820191906000526020600020905b81548152906001019060200180831161168857829003601f168201915b505050505081565b60606116b882612437565b6116f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ee90614318565b60405180910390fd5b60006117016124a3565b90506000815111611721576040518060200160405280600081525061174f565b8061172b84612535565b600c60405160200161173f93929190614408565b6040516020818303038152906040525b915050919050565b600d5481565b611765611b4b565b80600c908051906020019061177b929190612fca565b5050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61181b611b4b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561188b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611882906144ab565b60405180910390fd5b61189481611fe8565b50565b61189f611b4b565b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118f5919061329b565b60206040518083038186803b15801561190d57600080fd5b505afa158015611921573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194591906144e0565b6040518363ffffffff1660e01b815260040161196292919061450d565b602060405180830381600087803b15801561197c57600080fd5b505af1158015611990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b4919061454b565b6119f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ea906145c4565b60405180910390fd5b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611ae957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611af95750611af882612696565b5b9050919050565b611b0981612437565b611b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3f90613d79565b60405180910390fd5b50565b611b53611bc9565b73ffffffffffffffffffffffffffffffffffffffff16611b716111a2565b73ffffffffffffffffffffffffffffffffffffffff1614611bc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbe90614630565b60405180910390fd5b565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c4483610f84565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611c9683610f84565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611cd85750611cd7818561177f565b5b80611d1657508373ffffffffffffffffffffffffffffffffffffffff16611cfe846109fa565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611d3f82610f84565b73ffffffffffffffffffffffffffffffffffffffff1614611d95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8c906146c2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfc90614754565b60405180910390fd5b611e10838383612700565b611e1b600082611bd1565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e6b9190614181565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ec29190613f4f565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f81838383612814565b505050565b611f8e612819565b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611fd1611bc9565b604051611fde919061329b565b60405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6120b461227c565b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120f8611bc9565b604051612105919061329b565b60405180910390a1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561217e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612175906147c0565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161226f9190613121565b60405180910390a3505050565b612284610f6e565b156122c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122bb9061482c565b60405180910390fd5b565b60006122d0610b95565b90506000600e54826122e2919061487b565b141561230157600f60008154809291906122fb90613c52565b91905055505b600061230c82612862565b905060005b806123d5576013600083815260200190815260200160002060009054906101000a900460ff1661237a5761234584836128da565b60016013600084815260200190815260200160002060006101000a81548160ff021916908315150217905550600190506123d0565b6001600f546123899190613f4f565b600e5461239691906141b5565b8214156123c0576001600f54600e546123af91906141b5565b6123b99190613f4f565b91506123cf565b81806123cb90613c52565b9250505b5b612311565b50505050565b6123e6848484611d1f565b6123f2848484846128f8565b612431576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124289061491e565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6060600b80546124b29061390e565b80601f01602080910402602001604051908101604052809291908181526020018280546124de9061390e565b801561252b5780601f106125005761010080835404028352916020019161252b565b820191906000526020600020905b81548152906001019060200180831161250e57829003601f168201915b5050505050905090565b6060600082141561257d576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612691565b600082905060005b600082146125af57808061259890613c52565b915050600a826125a8919061493e565b9150612585565b60008167ffffffffffffffff8111156125cb576125ca6134b6565b5b6040519080825280601f01601f1916602001820160405280156125fd5781602001600182028036833780820191505090505b5090505b6000851461268a576001826126169190614181565b9150600a85612625919061487b565b60306126319190613f4f565b60f81b81838151811061264757612646613bf4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612683919061493e565b9450612601565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61270b838383611a19565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561274e5761274981612a8f565b61278d565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461278c5761278b8382612ad8565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156127d0576127cb81612c45565b61280f565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461280e5761280d8282612d16565b5b5b505050565b505050565b612821610f6e565b612860576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612857906149bb565b60405180910390fd5b565b600080600f54600e5461287591906141b5565b905060006001600e546128889190613f4f565b42338660405160200161289d93929190614a44565b6040516020818303038152906040528051906020012060001c6128c0919061487b565b905081816128ce9190613f4f565b90508092505050919050565b6128f4828260405180602001604052806000815250612d95565b5050565b60006129198473ffffffffffffffffffffffffffffffffffffffff166119f6565b15612a82578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612942611bc9565b8786866040518563ffffffff1660e01b81526004016129649493929190614ad6565b602060405180830381600087803b15801561297e57600080fd5b505af19250505080156129af57506040513d601f19601f820116820180604052508101906129ac9190614b37565b60015b612a32573d80600081146129df576040519150601f19603f3d011682016040523d82523d6000602084013e6129e4565b606091505b50600081511415612a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a219061491e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612a87565b600190505b949350505050565b600980549050600a600083815260200190815260200160002081905550600981908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001612ae5846110c4565b612aef9190614181565b9050600060086000848152602001908152602001600020549050818114612bd4576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816008600083815260200190815260200160002081905550505b6008600084815260200190815260200160002060009055600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600980549050612c599190614181565b90506000600a6000848152602001908152602001600020549050600060098381548110612c8957612c88613bf4565b5b906000526020600020015490508060098381548110612cab57612caa613bf4565b5b906000526020600020018190555081600a600083815260200190815260200160002081905550600a6000858152602001908152602001600020600090556009805480612cfa57612cf9614b64565b5b6001900381819060005260206000200160009055905550505050565b6000612d21836110c4565b905081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806008600084815260200190815260200160002081905550505050565b612d9f8383612df0565b612dac60008484846128f8565b612deb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de29061491e565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612e60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e5790614bdf565b60405180910390fd5b612e6981612437565b15612ea9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea090614c4b565b60405180910390fd5b612eb560008383612700565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f059190613f4f565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612fc660008383612814565b5050565b828054612fd69061390e565b90600052602060002090601f016020900481019282612ff8576000855561303f565b82601f1061301157805160ff191683800117855561303f565b8280016001018555821561303f579182015b8281111561303e578251825591602001919060010190613023565b5b50905061304c9190613050565b5090565b5b80821115613069576000816000905550600101613051565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6130b681613081565b81146130c157600080fd5b50565b6000813590506130d3816130ad565b92915050565b6000602082840312156130ef576130ee613077565b5b60006130fd848285016130c4565b91505092915050565b60008115159050919050565b61311b81613106565b82525050565b60006020820190506131366000830184613112565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561317657808201518184015260208101905061315b565b83811115613185576000848401525b50505050565b6000601f19601f8301169050919050565b60006131a78261313c565b6131b18185613147565b93506131c1818560208601613158565b6131ca8161318b565b840191505092915050565b600060208201905081810360008301526131ef818461319c565b905092915050565b6000819050919050565b61320a816131f7565b811461321557600080fd5b50565b60008135905061322781613201565b92915050565b60006020828403121561324357613242613077565b5b600061325184828501613218565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006132858261325a565b9050919050565b6132958161327a565b82525050565b60006020820190506132b0600083018461328c565b92915050565b6132bf8161327a565b81146132ca57600080fd5b50565b6000813590506132dc816132b6565b92915050565b600080604083850312156132f9576132f8613077565b5b6000613307858286016132cd565b925050602061331885828601613218565b9150509250929050565b61332b816131f7565b82525050565b60006020820190506133466000830184613322565b92915050565b60008060006060848603121561336557613364613077565b5b6000613373868287016132cd565b9350506020613384868287016132cd565b925050604061339586828701613218565b9150509250925092565b6000602082840312156133b5576133b4613077565b5b60006133c3848285016132cd565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613401816131f7565b82525050565b600061341383836133f8565b60208301905092915050565b6000602082019050919050565b6000613437826133cc565b61344181856133d7565b935061344c836133e8565b8060005b8381101561347d5781516134648882613407565b975061346f8361341f565b925050600181019050613450565b5085935050505092915050565b600060208201905081810360008301526134a4818461342c565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6134ee8261318b565b810181811067ffffffffffffffff8211171561350d5761350c6134b6565b5b80604052505050565b600061352061306d565b905061352c82826134e5565b919050565b600067ffffffffffffffff82111561354c5761354b6134b6565b5b6135558261318b565b9050602081019050919050565b82818337600083830152505050565b600061358461357f84613531565b613516565b9050828152602081018484840111156135a05761359f6134b1565b5b6135ab848285613562565b509392505050565b600082601f8301126135c8576135c76134ac565b5b81356135d8848260208601613571565b91505092915050565b6000602082840312156135f7576135f6613077565b5b600082013567ffffffffffffffff8111156136155761361461307c565b5b613621848285016135b3565b91505092915050565b61363381613106565b811461363e57600080fd5b50565b6000813590506136508161362a565b92915050565b6000806040838503121561366d5761366c613077565b5b600061367b858286016132cd565b925050602061368c85828601613641565b9150509250929050565b600061ffff82169050919050565b6136ad81613696565b81146136b857600080fd5b50565b6000813590506136ca816136a4565b92915050565b600080604083850312156136e7576136e6613077565b5b60006136f5858286016132cd565b9250506020613706858286016136bb565b9150509250929050565b600067ffffffffffffffff82111561372b5761372a6134b6565b5b6137348261318b565b9050602081019050919050565b600061375461374f84613710565b613516565b9050828152602081018484840111156137705761376f6134b1565b5b61377b848285613562565b509392505050565b600082601f830112613798576137976134ac565b5b81356137a8848260208601613741565b91505092915050565b600080600080608085870312156137cb576137ca613077565b5b60006137d9878288016132cd565b94505060206137ea878288016132cd565b93505060406137fb87828801613218565b925050606085013567ffffffffffffffff81111561381c5761381b61307c565b5b61382887828801613783565b91505092959194509250565b6000806040838503121561384b5761384a613077565b5b6000613859858286016132cd565b925050602061386a858286016132cd565b9150509250929050565b600061387f8261327a565b9050919050565b61388f81613874565b811461389a57600080fd5b50565b6000813590506138ac81613886565b92915050565b6000602082840312156138c8576138c7613077565b5b60006138d68482850161389d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061392657607f821691505b6020821081141561393a576139396138df565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061399c602183613147565b91506139a782613940565b604082019050919050565b600060208201905081810360008301526139cb8161398f565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000613a2e603e83613147565b9150613a39826139d2565b604082019050919050565b60006020820190508181036000830152613a5d81613a21565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613ac0602e83613147565b9150613acb82613a64565b604082019050919050565b60006020820190508181036000830152613aef81613ab3565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000613b52602b83613147565b9150613b5d82613af6565b604082019050919050565b60006020820190508181036000830152613b8181613b45565b9050919050565b7f5472616e73666572204661696c65640000000000000000000000000000000000600082015250565b6000613bbe600f83613147565b9150613bc982613b88565b602082019050919050565b60006020820190508181036000830152613bed81613bb1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613c5d826131f7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613c9057613c8f613c23565b5b600182019050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000613cf7602c83613147565b9150613d0282613c9b565b604082019050919050565b60006020820190508181036000830152613d2681613cea565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613d63601883613147565b9150613d6e82613d2d565b602082019050919050565b60006020820190508181036000830152613d9281613d56565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613df5602983613147565b9150613e0082613d99565b604082019050919050565b60006020820190508181036000830152613e2481613de8565b9050919050565b7f43656c6f73747269616c733a206d696e74416d6f756e742073686f756c64206260008201527f652067726561746572207468616e203000000000000000000000000000000000602082015250565b6000613e87603083613147565b9150613e9282613e2b565b604082019050919050565b60006020820190508181036000830152613eb681613e7a565b9050919050565b7f43656c6f73747269616c733a206d696e74416d6f756e742073686f756c64206260008201527f65206c657373207468616e206d6178206d696e74000000000000000000000000602082015250565b6000613f19603483613147565b9150613f2482613ebd565b604082019050919050565b60006020820190508181036000830152613f4881613f0c565b9050919050565b6000613f5a826131f7565b9150613f65836131f7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613f9a57613f99613c23565b5b828201905092915050565b7f43656c6f73747269616c733a20537570706c79206e6f7420617661696c61626c60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000614001602183613147565b915061400c82613fa5565b604082019050919050565b6000602082019050818103600083015261403081613ff4565b9050919050565b7f43656c6f73747261696c733a204d6178696d756d2077686974656c697374206d60008201527f696e742069732034000000000000000000000000000000000000000000000000602082015250565b6000614093602883613147565b915061409e82614037565b604082019050919050565b600060208201905081810360008301526140c281614086565b9050919050565b7f43656c6f73747269616c733a204d696e74696e67206973206f6e6c79206f706560008201527f6e20746f2077686974656c69737465642077616c6c6574732063757272656e7460208201527f6c79000000000000000000000000000000000000000000000000000000000000604082015250565b600061414b604283613147565b9150614156826140c9565b606082019050919050565b6000602082019050818103600083015261417a8161413e565b9050919050565b600061418c826131f7565b9150614197836131f7565b9250828210156141aa576141a9613c23565b5b828203905092915050565b60006141c0826131f7565b91506141cb836131f7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561420457614203613c23565b5b828202905092915050565b7f43656c6f73747269616c733a20496e737566666369656e742043656c6f000000600082015250565b6000614245601d83613147565b91506142508261420f565b602082019050919050565b6000602082019050818103600083015261427481614238565b9050919050565b600061428682613696565b915061ffff82141561429b5761429a613c23565b5b600182019050919050565b7f43656c6f73747269616c733a2055524920717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614302602c83613147565b915061430d826142a6565b604082019050919050565b60006020820190508181036000830152614331816142f5565b9050919050565b600081905092915050565b600061434e8261313c565b6143588185614338565b9350614368818560208601613158565b80840191505092915050565b60008190508160005260206000209050919050565b600081546143968161390e565b6143a08186614338565b945060018216600081146143bb57600181146143cc576143ff565b60ff198316865281860193506143ff565b6143d585614374565b60005b838110156143f7578154818901526001820191506020810190506143d8565b838801955050505b50505092915050565b60006144148286614343565b91506144208285614343565b915061442c8284614389565b9150819050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614495602683613147565b91506144a082614439565b604082019050919050565b600060208201905081810360008301526144c481614488565b9050919050565b6000815190506144da81613201565b92915050565b6000602082840312156144f6576144f5613077565b5b6000614504848285016144cb565b91505092915050565b6000604082019050614522600083018561328c565b61452f6020830184613322565b9392505050565b6000815190506145458161362a565b92915050565b60006020828403121561456157614560613077565b5b600061456f84828501614536565b91505092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006145ae600f83613147565b91506145b982614578565b602082019050919050565b600060208201905081810360008301526145dd816145a1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061461a602083613147565b9150614625826145e4565b602082019050919050565b600060208201905081810360008301526146498161460d565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006146ac602583613147565b91506146b782614650565b604082019050919050565b600060208201905081810360008301526146db8161469f565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061473e602483613147565b9150614749826146e2565b604082019050919050565b6000602082019050818103600083015261476d81614731565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006147aa601983613147565b91506147b582614774565b602082019050919050565b600060208201905081810360008301526147d98161479d565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614816601083613147565b9150614821826147e0565b602082019050919050565b6000602082019050818103600083015261484581614809565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614886826131f7565b9150614891836131f7565b9250826148a1576148a061484c565b5b828206905092915050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614908603283613147565b9150614913826148ac565b604082019050919050565b60006020820190508181036000830152614937816148fb565b9050919050565b6000614949826131f7565b9150614954836131f7565b9250826149645761496361484c565b5b828204905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006149a5601483613147565b91506149b08261496f565b602082019050919050565b600060208201905081810360008301526149d481614998565b9050919050565b6000819050919050565b6149f66149f1826131f7565b6149db565b82525050565b60008160601b9050919050565b6000614a14826149fc565b9050919050565b6000614a2682614a09565b9050919050565b614a3e614a398261327a565b614a1b565b82525050565b6000614a5082866149e5565b602082019150614a608285614a2d565b601482019150614a7082846149e5565b602082019150819050949350505050565b600081519050919050565b600082825260208201905092915050565b6000614aa882614a81565b614ab28185614a8c565b9350614ac2818560208601613158565b614acb8161318b565b840191505092915050565b6000608082019050614aeb600083018761328c565b614af8602083018661328c565b614b056040830185613322565b8181036060830152614b178184614a9d565b905095945050505050565b600081519050614b31816130ad565b92915050565b600060208284031215614b4d57614b4c613077565b5b6000614b5b84828501614b22565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614bc9602083613147565b9150614bd482614b93565b602082019050919050565b60006020820190508181036000830152614bf881614bbc565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614c35601c83613147565b9150614c4082614bff565b602082019050919050565b60006020820190508181036000830152614c6481614c28565b905091905056fea2646970667358221220d07b4a9d1929dc113574d738c90663b81e7e06ed7583a16f0594d9149411df6f64736f6c6343000809003368747470733a2f2f697066732e696f2f697066732f516d546e3157354370546471726b7664534c62376e5847575659596d6f54574d76384e32726970517468587732762f",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c8063586b9a7c1161012e578063a88e0996116100ab578063d5abeb011161006f578063d5abeb011461080b578063da3ef23f14610836578063e985e9c51461085f578063f2fde38b1461089c578063f4f3b200146108c55761023b565b8063a88e099614610733578063ad0be4bd1461075e578063b88d4fde1461077a578063c6682862146107a3578063c87b56dd146107ce5761023b565b8063715018a6116100f2578063715018a6146106865780638456cb591461069d5780638da5cb5b146106b457806395d89b41146106df578063a22cb4651461070a5761023b565b8063586b9a7c1461059f5780635c975abb146105b65780636352211e146105e15780636c0360eb1461061e57806370a08231146106495761023b565b80632f745c59116101bc57806342842e0e1161018057806342842e0e146104aa578063438b6300146104d357806344a0d68a146105105780634f6ccce71461053957806355f804b3146105765761023b565b80632f745c59146103f85780633ccfd60b146104355780633f4ba83a1461043f5780634146ed0a14610456578063421b2d8b146104815761023b565b8063095ea7b311610203578063095ea7b31461032557806313faede61461034e57806318160ddd14610379578063239c70ae146103a457806323b872dd146103cf5761023b565b806301ffc9a71461024057806306fdde031461027d578063081812fc146102a8578063083bbe7f146102e5578063088a4ed0146102fc575b600080fd5b34801561024c57600080fd5b50610267600480360381019061026291906130d9565b6108ee565b6040516102749190613121565b60405180910390f35b34801561028957600080fd5b50610292610968565b60405161029f91906131d5565b60405180910390f35b3480156102b457600080fd5b506102cf60048036038101906102ca919061322d565b6109fa565b6040516102dc919061329b565b60405180910390f35b3480156102f157600080fd5b506102fa610a40565b005b34801561030857600080fd5b50610323600480360381019061031e919061322d565b610a65565b005b34801561033157600080fd5b5061034c600480360381019061034791906132e2565b610a77565b005b34801561035a57600080fd5b50610363610b8f565b6040516103709190613331565b60405180910390f35b34801561038557600080fd5b5061038e610b95565b60405161039b9190613331565b60405180910390f35b3480156103b057600080fd5b506103b9610ba2565b6040516103c69190613331565b60405180910390f35b3480156103db57600080fd5b506103f660048036038101906103f1919061334c565b610ba8565b005b34801561040457600080fd5b5061041f600480360381019061041a91906132e2565b610c08565b60405161042c9190613331565b60405180910390f35b61043d610cad565b005b34801561044b57600080fd5b50610454610d2b565b005b34801561046257600080fd5b5061046b610d3d565b6040516104789190613121565b60405180910390f35b34801561048d57600080fd5b506104a860048036038101906104a3919061339f565b610d86565b005b3480156104b657600080fd5b506104d160048036038101906104cc919061334c565b610dd6565b005b3480156104df57600080fd5b506104fa60048036038101906104f5919061339f565b610df6565b604051610507919061348a565b60405180910390f35b34801561051c57600080fd5b506105376004803603810190610532919061322d565b610ea4565b005b34801561054557600080fd5b50610560600480360381019061055b919061322d565b610eb6565b60405161056d9190613331565b60405180910390f35b34801561058257600080fd5b5061059d600480360381019061059891906135e1565b610f27565b005b3480156105ab57600080fd5b506105b4610f49565b005b3480156105c257600080fd5b506105cb610f6e565b6040516105d89190613121565b60405180910390f35b3480156105ed57600080fd5b506106086004803603810190610603919061322d565b610f84565b604051610615919061329b565b60405180910390f35b34801561062a57600080fd5b50610633611036565b60405161064091906131d5565b60405180910390f35b34801561065557600080fd5b50610670600480360381019061066b919061339f565b6110c4565b60405161067d9190613331565b60405180910390f35b34801561069257600080fd5b5061069b61117c565b005b3480156106a957600080fd5b506106b2611190565b005b3480156106c057600080fd5b506106c96111a2565b6040516106d6919061329b565b60405180910390f35b3480156106eb57600080fd5b506106f46111cb565b60405161070191906131d5565b60405180910390f35b34801561071657600080fd5b50610731600480360381019061072c9190613656565b61125d565b005b34801561073f57600080fd5b50610748611273565b6040516107559190613121565b60405180910390f35b610778600480360381019061077391906136d0565b611286565b005b34801561078657600080fd5b506107a1600480360381019061079c91906137b1565b6115bd565b005b3480156107af57600080fd5b506107b861161f565b6040516107c591906131d5565b60405180910390f35b3480156107da57600080fd5b506107f560048036038101906107f0919061322d565b6116ad565b60405161080291906131d5565b60405180910390f35b34801561081757600080fd5b50610820611757565b60405161082d9190613331565b60405180910390f35b34801561084257600080fd5b5061085d600480360381019061085891906135e1565b61175d565b005b34801561086b57600080fd5b5061088660048036038101906108819190613834565b61177f565b6040516108939190613121565b60405180910390f35b3480156108a857600080fd5b506108c360048036038101906108be919061339f565b611813565b005b3480156108d157600080fd5b506108ec60048036038101906108e791906138b2565b611897565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610961575061096082611a1e565b5b9050919050565b6060600180546109779061390e565b80601f01602080910402602001604051908101604052809291908181526020018280546109a39061390e565b80156109f05780601f106109c5576101008083540402835291602001916109f0565b820191906000526020600020905b8154815290600101906020018083116109d357829003601f168201915b5050505050905090565b6000610a0582611b00565b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610a48611b4b565b6001601260006101000a81548160ff021916908315150217905550565b610a6d611b4b565b8060108190555050565b6000610a8282610f84565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea906139b2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b12611bc9565b73ffffffffffffffffffffffffffffffffffffffff161480610b415750610b4081610b3b611bc9565b61177f565b5b610b80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7790613a44565b60405180910390fd5b610b8a8383611bd1565b505050565b60115481565b6000600980549050905090565b60105481565b610bb9610bb3611bc9565b82611c8a565b610bf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bef90613ad6565b60405180910390fd5b610c03838383611d1f565b505050565b6000610c13836110c4565b8210610c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4b90613b68565b60405180910390fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610cb5611b4b565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050610d29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2090613bd4565b60405180910390fd5b565b610d33611b4b565b610d3b611f86565b565b600080601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411905090565b610d8e611b4b565b6004601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b610df1838383604051806020016040528060008152506115bd565b505050565b60606000610e03836110c4565b905060008167ffffffffffffffff811115610e2157610e206134b6565b5b604051908082528060200260200182016040528015610e4f5781602001602082028036833780820191505090505b50905060005b82811015610e9957610e678582610c08565b828281518110610e7a57610e79613bf4565b5b6020026020010181815250508080610e9190613c52565b915050610e55565b508092505050919050565b610eac611b4b565b8060118190555050565b6000610ec0610b95565b8210610f01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef890613d0d565b60405180910390fd5b60098281548110610f1557610f14613bf4565b5b90600052602060002001549050919050565b610f2f611b4b565b80600b9080519060200190610f45929190612fca565b5050565b610f51611b4b565b6000601260006101000a81548160ff021916908315150217905550565b60008060149054906101000a900460ff16905090565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561102d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102490613d79565b60405180910390fd5b80915050919050565b600b80546110439061390e565b80601f016020809104026020016040519081016040528092919081815260200182805461106f9061390e565b80156110bc5780601f10611091576101008083540402835291602001916110bc565b820191906000526020600020905b81548152906001019060200180831161109f57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112c90613e0b565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611184611b4b565b61118e6000611fe8565b565b611198611b4b565b6111a06120ac565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600280546111da9061390e565b80601f01602080910402602001604051908101604052809291908181526020018280546112069061390e565b80156112535780601f1061122857610100808354040283529160200191611253565b820191906000526020600020905b81548152906001019060200180831161123657829003601f168201915b5050505050905090565b61126f611268611bc9565b838361210f565b5050565b601260009054906101000a900460ff1681565b61128e61227c565b60008161ffff16116112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc90613e9d565b60405180910390fd5b6010548161ffff16111561131e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131590613f2f565b60405180910390fd5b6000611328610b95565b9050600d548261ffff168261133d9190613f4f565b111561137e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137590614017565b60405180910390fd5b601260009054906101000a900460ff16156114f657601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261ffff161115611419576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611410906140a9565b60405180910390fd5b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161149b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149290614161565b60405180910390fd5b8161ffff16601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114ee9190614181565b925050819055505b6114fe6111a2565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611585578161ffff1660115461154291906141b5565b341015611584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157b9061425b565b60405180910390fd5b5b6000600190505b8261ffff168161ffff16116115b7576115a4846122c6565b80806115af9061427b565b91505061158c565b50505050565b6115ce6115c8611bc9565b83611c8a565b61160d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160490613ad6565b60405180910390fd5b611619848484846123db565b50505050565b600c805461162c9061390e565b80601f01602080910402602001604051908101604052809291908181526020018280546116589061390e565b80156116a55780601f1061167a576101008083540402835291602001916116a5565b820191906000526020600020905b81548152906001019060200180831161168857829003601f168201915b505050505081565b60606116b882612437565b6116f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ee90614318565b60405180910390fd5b60006117016124a3565b90506000815111611721576040518060200160405280600081525061174f565b8061172b84612535565b600c60405160200161173f93929190614408565b6040516020818303038152906040525b915050919050565b600d5481565b611765611b4b565b80600c908051906020019061177b929190612fca565b5050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61181b611b4b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561188b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611882906144ab565b60405180910390fd5b61189481611fe8565b50565b61189f611b4b565b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118f5919061329b565b60206040518083038186803b15801561190d57600080fd5b505afa158015611921573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194591906144e0565b6040518363ffffffff1660e01b815260040161196292919061450d565b602060405180830381600087803b15801561197c57600080fd5b505af1158015611990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b4919061454b565b6119f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ea906145c4565b60405180910390fd5b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611ae957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611af95750611af882612696565b5b9050919050565b611b0981612437565b611b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3f90613d79565b60405180910390fd5b50565b611b53611bc9565b73ffffffffffffffffffffffffffffffffffffffff16611b716111a2565b73ffffffffffffffffffffffffffffffffffffffff1614611bc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbe90614630565b60405180910390fd5b565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c4483610f84565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611c9683610f84565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611cd85750611cd7818561177f565b5b80611d1657508373ffffffffffffffffffffffffffffffffffffffff16611cfe846109fa565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611d3f82610f84565b73ffffffffffffffffffffffffffffffffffffffff1614611d95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8c906146c2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfc90614754565b60405180910390fd5b611e10838383612700565b611e1b600082611bd1565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e6b9190614181565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ec29190613f4f565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f81838383612814565b505050565b611f8e612819565b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611fd1611bc9565b604051611fde919061329b565b60405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6120b461227c565b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120f8611bc9565b604051612105919061329b565b60405180910390a1565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561217e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612175906147c0565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161226f9190613121565b60405180910390a3505050565b612284610f6e565b156122c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122bb9061482c565b60405180910390fd5b565b60006122d0610b95565b90506000600e54826122e2919061487b565b141561230157600f60008154809291906122fb90613c52565b91905055505b600061230c82612862565b905060005b806123d5576013600083815260200190815260200160002060009054906101000a900460ff1661237a5761234584836128da565b60016013600084815260200190815260200160002060006101000a81548160ff021916908315150217905550600190506123d0565b6001600f546123899190613f4f565b600e5461239691906141b5565b8214156123c0576001600f54600e546123af91906141b5565b6123b99190613f4f565b91506123cf565b81806123cb90613c52565b9250505b5b612311565b50505050565b6123e6848484611d1f565b6123f2848484846128f8565b612431576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124289061491e565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6060600b80546124b29061390e565b80601f01602080910402602001604051908101604052809291908181526020018280546124de9061390e565b801561252b5780601f106125005761010080835404028352916020019161252b565b820191906000526020600020905b81548152906001019060200180831161250e57829003601f168201915b5050505050905090565b6060600082141561257d576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612691565b600082905060005b600082146125af57808061259890613c52565b915050600a826125a8919061493e565b9150612585565b60008167ffffffffffffffff8111156125cb576125ca6134b6565b5b6040519080825280601f01601f1916602001820160405280156125fd5781602001600182028036833780820191505090505b5090505b6000851461268a576001826126169190614181565b9150600a85612625919061487b565b60306126319190613f4f565b60f81b81838151811061264757612646613bf4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612683919061493e565b9450612601565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61270b838383611a19565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561274e5761274981612a8f565b61278d565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461278c5761278b8382612ad8565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156127d0576127cb81612c45565b61280f565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461280e5761280d8282612d16565b5b5b505050565b505050565b612821610f6e565b612860576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612857906149bb565b60405180910390fd5b565b600080600f54600e5461287591906141b5565b905060006001600e546128889190613f4f565b42338660405160200161289d93929190614a44565b6040516020818303038152906040528051906020012060001c6128c0919061487b565b905081816128ce9190613f4f565b90508092505050919050565b6128f4828260405180602001604052806000815250612d95565b5050565b60006129198473ffffffffffffffffffffffffffffffffffffffff166119f6565b15612a82578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612942611bc9565b8786866040518563ffffffff1660e01b81526004016129649493929190614ad6565b602060405180830381600087803b15801561297e57600080fd5b505af19250505080156129af57506040513d601f19601f820116820180604052508101906129ac9190614b37565b60015b612a32573d80600081146129df576040519150601f19603f3d011682016040523d82523d6000602084013e6129e4565b606091505b50600081511415612a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a219061491e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612a87565b600190505b949350505050565b600980549050600a600083815260200190815260200160002081905550600981908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001612ae5846110c4565b612aef9190614181565b9050600060086000848152602001908152602001600020549050818114612bd4576000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816008600083815260200190815260200160002081905550505b6008600084815260200190815260200160002060009055600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600980549050612c599190614181565b90506000600a6000848152602001908152602001600020549050600060098381548110612c8957612c88613bf4565b5b906000526020600020015490508060098381548110612cab57612caa613bf4565b5b906000526020600020018190555081600a600083815260200190815260200160002081905550600a6000858152602001908152602001600020600090556009805480612cfa57612cf9614b64565b5b6001900381819060005260206000200160009055905550505050565b6000612d21836110c4565b905081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806008600084815260200190815260200160002081905550505050565b612d9f8383612df0565b612dac60008484846128f8565b612deb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de29061491e565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612e60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e5790614bdf565b60405180910390fd5b612e6981612437565b15612ea9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea090614c4b565b60405180910390fd5b612eb560008383612700565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f059190613f4f565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612fc660008383612814565b5050565b828054612fd69061390e565b90600052602060002090601f016020900481019282612ff8576000855561303f565b82601f1061301157805160ff191683800117855561303f565b8280016001018555821561303f579182015b8281111561303e578251825591602001919060010190613023565b5b50905061304c9190613050565b5090565b5b80821115613069576000816000905550600101613051565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6130b681613081565b81146130c157600080fd5b50565b6000813590506130d3816130ad565b92915050565b6000602082840312156130ef576130ee613077565b5b60006130fd848285016130c4565b91505092915050565b60008115159050919050565b61311b81613106565b82525050565b60006020820190506131366000830184613112565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561317657808201518184015260208101905061315b565b83811115613185576000848401525b50505050565b6000601f19601f8301169050919050565b60006131a78261313c565b6131b18185613147565b93506131c1818560208601613158565b6131ca8161318b565b840191505092915050565b600060208201905081810360008301526131ef818461319c565b905092915050565b6000819050919050565b61320a816131f7565b811461321557600080fd5b50565b60008135905061322781613201565b92915050565b60006020828403121561324357613242613077565b5b600061325184828501613218565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006132858261325a565b9050919050565b6132958161327a565b82525050565b60006020820190506132b0600083018461328c565b92915050565b6132bf8161327a565b81146132ca57600080fd5b50565b6000813590506132dc816132b6565b92915050565b600080604083850312156132f9576132f8613077565b5b6000613307858286016132cd565b925050602061331885828601613218565b9150509250929050565b61332b816131f7565b82525050565b60006020820190506133466000830184613322565b92915050565b60008060006060848603121561336557613364613077565b5b6000613373868287016132cd565b9350506020613384868287016132cd565b925050604061339586828701613218565b9150509250925092565b6000602082840312156133b5576133b4613077565b5b60006133c3848285016132cd565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613401816131f7565b82525050565b600061341383836133f8565b60208301905092915050565b6000602082019050919050565b6000613437826133cc565b61344181856133d7565b935061344c836133e8565b8060005b8381101561347d5781516134648882613407565b975061346f8361341f565b925050600181019050613450565b5085935050505092915050565b600060208201905081810360008301526134a4818461342c565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6134ee8261318b565b810181811067ffffffffffffffff8211171561350d5761350c6134b6565b5b80604052505050565b600061352061306d565b905061352c82826134e5565b919050565b600067ffffffffffffffff82111561354c5761354b6134b6565b5b6135558261318b565b9050602081019050919050565b82818337600083830152505050565b600061358461357f84613531565b613516565b9050828152602081018484840111156135a05761359f6134b1565b5b6135ab848285613562565b509392505050565b600082601f8301126135c8576135c76134ac565b5b81356135d8848260208601613571565b91505092915050565b6000602082840312156135f7576135f6613077565b5b600082013567ffffffffffffffff8111156136155761361461307c565b5b613621848285016135b3565b91505092915050565b61363381613106565b811461363e57600080fd5b50565b6000813590506136508161362a565b92915050565b6000806040838503121561366d5761366c613077565b5b600061367b858286016132cd565b925050602061368c85828601613641565b9150509250929050565b600061ffff82169050919050565b6136ad81613696565b81146136b857600080fd5b50565b6000813590506136ca816136a4565b92915050565b600080604083850312156136e7576136e6613077565b5b60006136f5858286016132cd565b9250506020613706858286016136bb565b9150509250929050565b600067ffffffffffffffff82111561372b5761372a6134b6565b5b6137348261318b565b9050602081019050919050565b600061375461374f84613710565b613516565b9050828152602081018484840111156137705761376f6134b1565b5b61377b848285613562565b509392505050565b600082601f830112613798576137976134ac565b5b81356137a8848260208601613741565b91505092915050565b600080600080608085870312156137cb576137ca613077565b5b60006137d9878288016132cd565b94505060206137ea878288016132cd565b93505060406137fb87828801613218565b925050606085013567ffffffffffffffff81111561381c5761381b61307c565b5b61382887828801613783565b91505092959194509250565b6000806040838503121561384b5761384a613077565b5b6000613859858286016132cd565b925050602061386a858286016132cd565b9150509250929050565b600061387f8261327a565b9050919050565b61388f81613874565b811461389a57600080fd5b50565b6000813590506138ac81613886565b92915050565b6000602082840312156138c8576138c7613077565b5b60006138d68482850161389d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061392657607f821691505b6020821081141561393a576139396138df565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061399c602183613147565b91506139a782613940565b604082019050919050565b600060208201905081810360008301526139cb8161398f565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000613a2e603e83613147565b9150613a39826139d2565b604082019050919050565b60006020820190508181036000830152613a5d81613a21565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613ac0602e83613147565b9150613acb82613a64565b604082019050919050565b60006020820190508181036000830152613aef81613ab3565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000613b52602b83613147565b9150613b5d82613af6565b604082019050919050565b60006020820190508181036000830152613b8181613b45565b9050919050565b7f5472616e73666572204661696c65640000000000000000000000000000000000600082015250565b6000613bbe600f83613147565b9150613bc982613b88565b602082019050919050565b60006020820190508181036000830152613bed81613bb1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613c5d826131f7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613c9057613c8f613c23565b5b600182019050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000613cf7602c83613147565b9150613d0282613c9b565b604082019050919050565b60006020820190508181036000830152613d2681613cea565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613d63601883613147565b9150613d6e82613d2d565b602082019050919050565b60006020820190508181036000830152613d9281613d56565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613df5602983613147565b9150613e0082613d99565b604082019050919050565b60006020820190508181036000830152613e2481613de8565b9050919050565b7f43656c6f73747269616c733a206d696e74416d6f756e742073686f756c64206260008201527f652067726561746572207468616e203000000000000000000000000000000000602082015250565b6000613e87603083613147565b9150613e9282613e2b565b604082019050919050565b60006020820190508181036000830152613eb681613e7a565b9050919050565b7f43656c6f73747269616c733a206d696e74416d6f756e742073686f756c64206260008201527f65206c657373207468616e206d6178206d696e74000000000000000000000000602082015250565b6000613f19603483613147565b9150613f2482613ebd565b604082019050919050565b60006020820190508181036000830152613f4881613f0c565b9050919050565b6000613f5a826131f7565b9150613f65836131f7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613f9a57613f99613c23565b5b828201905092915050565b7f43656c6f73747269616c733a20537570706c79206e6f7420617661696c61626c60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000614001602183613147565b915061400c82613fa5565b604082019050919050565b6000602082019050818103600083015261403081613ff4565b9050919050565b7f43656c6f73747261696c733a204d6178696d756d2077686974656c697374206d60008201527f696e742069732034000000000000000000000000000000000000000000000000602082015250565b6000614093602883613147565b915061409e82614037565b604082019050919050565b600060208201905081810360008301526140c281614086565b9050919050565b7f43656c6f73747269616c733a204d696e74696e67206973206f6e6c79206f706560008201527f6e20746f2077686974656c69737465642077616c6c6574732063757272656e7460208201527f6c79000000000000000000000000000000000000000000000000000000000000604082015250565b600061414b604283613147565b9150614156826140c9565b606082019050919050565b6000602082019050818103600083015261417a8161413e565b9050919050565b600061418c826131f7565b9150614197836131f7565b9250828210156141aa576141a9613c23565b5b828203905092915050565b60006141c0826131f7565b91506141cb836131f7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561420457614203613c23565b5b828202905092915050565b7f43656c6f73747269616c733a20496e737566666369656e742043656c6f000000600082015250565b6000614245601d83613147565b91506142508261420f565b602082019050919050565b6000602082019050818103600083015261427481614238565b9050919050565b600061428682613696565b915061ffff82141561429b5761429a613c23565b5b600182019050919050565b7f43656c6f73747269616c733a2055524920717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614302602c83613147565b915061430d826142a6565b604082019050919050565b60006020820190508181036000830152614331816142f5565b9050919050565b600081905092915050565b600061434e8261313c565b6143588185614338565b9350614368818560208601613158565b80840191505092915050565b60008190508160005260206000209050919050565b600081546143968161390e565b6143a08186614338565b945060018216600081146143bb57600181146143cc576143ff565b60ff198316865281860193506143ff565b6143d585614374565b60005b838110156143f7578154818901526001820191506020810190506143d8565b838801955050505b50505092915050565b60006144148286614343565b91506144208285614343565b915061442c8284614389565b9150819050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614495602683613147565b91506144a082614439565b604082019050919050565b600060208201905081810360008301526144c481614488565b9050919050565b6000815190506144da81613201565b92915050565b6000602082840312156144f6576144f5613077565b5b6000614504848285016144cb565b91505092915050565b6000604082019050614522600083018561328c565b61452f6020830184613322565b9392505050565b6000815190506145458161362a565b92915050565b60006020828403121561456157614560613077565b5b600061456f84828501614536565b91505092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006145ae600f83613147565b91506145b982614578565b602082019050919050565b600060208201905081810360008301526145dd816145a1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061461a602083613147565b9150614625826145e4565b602082019050919050565b600060208201905081810360008301526146498161460d565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006146ac602583613147565b91506146b782614650565b604082019050919050565b600060208201905081810360008301526146db8161469f565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061473e602483613147565b9150614749826146e2565b604082019050919050565b6000602082019050818103600083015261476d81614731565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006147aa601983613147565b91506147b582614774565b602082019050919050565b600060208201905081810360008301526147d98161479d565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000614816601083613147565b9150614821826147e0565b602082019050919050565b6000602082019050818103600083015261484581614809565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614886826131f7565b9150614891836131f7565b9250826148a1576148a061484c565b5b828206905092915050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614908603283613147565b9150614913826148ac565b604082019050919050565b60006020820190508181036000830152614937816148fb565b9050919050565b6000614949826131f7565b9150614954836131f7565b9250826149645761496361484c565b5b828204905092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006149a5601483613147565b91506149b08261496f565b602082019050919050565b600060208201905081810360008301526149d481614998565b9050919050565b6000819050919050565b6149f66149f1826131f7565b6149db565b82525050565b60008160601b9050919050565b6000614a14826149fc565b9050919050565b6000614a2682614a09565b9050919050565b614a3e614a398261327a565b614a1b565b82525050565b6000614a5082866149e5565b602082019150614a608285614a2d565b601482019150614a7082846149e5565b602082019150819050949350505050565b600081519050919050565b600082825260208201905092915050565b6000614aa882614a81565b614ab28185614a8c565b9350614ac2818560208601613158565b614acb8161318b565b840191505092915050565b6000608082019050614aeb600083018761328c565b614af8602083018661328c565b614b056040830185613322565b8181036060830152614b178184614a9d565b905095945050505050565b600081519050614b31816130ad565b92915050565b600060208284031215614b4d57614b4c613077565b5b6000614b5b84828501614b22565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614bc9602083613147565b9150614bd482614b93565b602082019050919050565b60006020820190508181036000830152614bf881614bbc565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614c35601c83613147565b9150614c4082614bff565b602082019050919050565b60006020820190508181036000830152614c6481614c28565b905091905056fea2646970667358221220d07b4a9d1929dc113574d738c90663b81e7e06ed7583a16f0594d9149411df6f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2332,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2455,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3617,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3619,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3623,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3627,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3631,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3637,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4607,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4611,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4614,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "_allTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4618,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6685,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "baseURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 6688,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "baseExtension",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 6691,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "maxSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 6694,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "batchSize",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 6697,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "currentBatch",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 6700,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "maxMintAmount",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 6703,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "cost",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 6706,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "onlyWhitelist",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 6710,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "isMinted",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 6714,
        "contract": "contracts/Celostrials.sol:Celostrials",
        "label": "whiteList",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}